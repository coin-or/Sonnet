#---------------------------------#
#      general configuration      #
#---------------------------------#

environment:
  sonar_token:
    secure: GHaPt+XpyKpioRGIrDn/oDzDF/5F/tc4U7aA7H2sWAnDi37kkzGcPFKaKSY24kfm
  github_auth_token:
    secure: 7rM8AX6MnUMN7F8Ad9BTvgRci9lmy4i3LWHC5l9ZdVY3xtJg7RwIXNWAg95vXFmK

# version format
version: 1.4.0.{build}

# you can use {branch} name in version format too
# version: 1.0.{build}-{branch}

# branches to build
branches:
  except:
    - latest

# Do not build on tags (GitHub, Bitbucket, GitLab, Gitea)
# skip_tags: true

# we dont need the full git history of Sonnet to be part of the clone.
shallow_clone: true

image: Visual Studio 2019

# scripts that are called at very beginning, before repo cloning
init:
  - ps: |
      if ($env:sonar_token -like '')
      {
        Write-Host "Cannot decrypt SonarQube token. This could happen for builds from Pull Requests from other repos."
        Write-Host "Proceeding without SonarQube..."
      } else {
        Write-Host "Proceeding with SonarQube..."
        choco install "sonarscanner-msbuild-net46" -y
        $env:JAVA_HOME = "C:\Program Files\Java\jdk11"
        $env:PATH += ";JAVA_HOME\bin"
      }
  - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

# scripts that run after cloning repository
install:
  # by default, all script lines are interpreted as batch
  # for clarity, don't use extra bat files
  #- CALL c:\projects\sonnet\appveyor-install.bat
  # Multi-line batch if ( ) does work, but works in ps
  - echo -- Install
  - ps: |
      $env:GIT_REDIRECT_STDERR = '2>&1'
      if ($env:APPVEYOR_REPO_COMMIT_MESSAGE -like '*use fork*' ) 
      { 
        Write-Host "For dependencies, use fork repo"
        git clone --depth 1 https://github.com/jhmgoossens/BuildTools.git -b master C:\projects\BuildTools
        git clone --depth 1 https://github.com/jhmgoossens/Cbc.git -b dev C:\projects\Cbc
        git clone --depth 1 https://github.com/jhmgoossens/Clp.git -b dev C:\projects\Clp
        git clone --depth 1 https://github.com/jhmgoossens/Cgl.git -b dev C:\projects\Cgl
        git clone --depth 1 https://github.com/jhmgoossens/CoinUtils.git -b dev C:\projects\CoinUtils
        git clone --depth 1 https://github.com/jhmgoossens/Osi.git -b dev C:\projects\Osi
      } else {
        Write-Host "For dependencies, use coin-or repo (default, unless use fork is mentioned in the commit message)"
        git clone --depth 1 https://github.com/coin-or-tools/BuildTools.git -b master C:\projects\BuildTools
        git clone --depth 1 https://github.com/coin-or/Cbc.git -b master C:\projects\Cbc
        git clone --depth 1 https://github.com/coin-or/Clp.git -b master C:\projects\Clp
        git clone --depth 1 https://github.com/coin-or/Cgl.git -b master C:\projects\Cgl
        git clone --depth 1 https://github.com/coin-or/CoinUtils.git -b master C:\projects\CoinUtils
        git clone --depth 1 https://github.com/coin-or/Osi.git -b master C:\projects\Osi
      }
      git clone --depth 1 https://github.com/coin-or-tools/Data-Sample -b master C:\projects\Data-Sample
      git clone --depth 1 https://github.com/coin-or-tools/Data-miplib3 -b master C:\projects\Data-miplib3
      7z x -bso0 -oC:\projects\Data-miplib3 C:\projects\Data-miplib3\*.gz

      git clone --depth 1 https://github.com/GerHobbelt/pthread-win32.git -b master c:\pthreads

  - set SONNET_SAMPLEDIR=C:\projects\Data-Sample
  - set SONNET_MIPLIBDIR=C:\projects\Data-miplib3
  - set RELEASE_TYPE=undefined
  - set RELEASE_NAME=undefined
  # be careful of trailing white spaces in env values!
  - if "%APPVEYOR_REPO_TAG%"=="true" ( set RELEASE_TYPE=tag&& set RELEASE_NAME=Sonnet-%APPVEYOR_REPO_TAG_NAME%) else if "%APPVEYOR_FORCED_BUILD%"=="true" ( set RELEASE_TYPE=manual&& set RELEASE_NAME=Sonnet-%APPVEYOR_REPO_BRANCH%-manual) else ( set RELEASE_TYPE=ci&& set RELEASE_NAME=Sonnet-%APPVEYOR_REPO_BRANCH%-CI)
  - ps: |
      appveyor AddMessage "Only x64 builds are included. For x86, please build manually."
      if ($env:sonar_token -like '')
      { 
        appveyor AddMessage "No SonarQube report for this build. For other SonarQube report, see https://sonarcloud.io/dashboard?id=$env:RELEASE_NAME"
      } else { 
        appveyor AddMessage "For SonarQube report, see https://sonarcloud.io/dashboard?id=$env:RELEASE_NAME"
      }

# enable patching of AssemblyInfo.* files
assembly_info:
  patch: true
  file: AssemblyInfo.*
  assembly_version: "1.4.0.0"
  assembly_file_version: "1.4.0.{build}"
#  assembly_informational_version: "1.4.0.{build}"

#---------------------------------#
#       build configuration       #
#---------------------------------#
# We do this manually using msbuild, such that in one job we could do multiple Configurations

# build platform, i.e. x86, x64, Any CPU. This setting is optional.
# to add several platforms to build matrix:

#platform:
#  - x86
#  - x64
# build Configuration, i.e. Debug, Release, etc.
#configuration:
#  - Release
#build:
#  parallel: true                  # enable MSBuild parallel builds
#  project: c:\projects\sonnet\MSVisualStudio\v16\Sonnet.sln # path to Visual Studio solution or project

before_build:
  - echo -- Before_build
  - echo RELEASE_NAME "%RELEASE_NAME%"
  - echo RELEASE_TYPE "%RELEASE_TYPE%"
  - echo Creating %RELEASE_NAME%-src.zip artefact from projects folder
  - 7z a -tzip -r -x!.git "c:\projects\sonnet\%RELEASE_NAME%-src.zip" c:\projects\*
  - nuget restore MSVisualStudio\v16\Sonnet.sln
  - if not "%sonar_token%"=="" ( SonarScanner.MSBuild.exe begin /k:"%RELEASE_NAME%" /d:"sonar.host.url=https://sonarcloud.io" /d:"sonar.login=%sonar_token%" /o:"jhmgoossens" /d:sonar.c.file.suffixes=- /d:sonar.cpp.file.suffixes=- /d:sonar.objc.file.suffixes=- )

build_script:
  - echo -- Build_script
  - echo Build pthread-win32 as static library for 
  - msbuild c:\pthreads\windows\VS2019\pthread_lib.2019.vcxproj /p:Configuration=Release;Platform=x64 /m
  - mkdir c:\projects\sonnet\lib\x64	
  - copy c:\pthreads\windows\VS2019\bin\Release-Unicode-64bit-x64\pthread_static_lib.lib c:\projects\sonnet\lib\x64\.
  - echo Build Sonnet for x64
  - msbuild MSVisualStudio\v16\Sonnet.sln /p:Configuration=ReleaseParallel;Platform=x64 /m

after_build:
  - echo -- After_build

#test:
# use automatic test discovery
# Doesnt work when building both x86 and x64 without using separate build platforms
# instead, test via test script

test_script:
  - echo Disable tests because of missing SDK, AppVeyor time limit and issues with logger.
  - dotnet test MSVisualStudio\v16\SonnetTest\bin\x64\Release\net5.0\SonnetTest.exe
  - vstest.console MSVisualStudio\v16\SonnetTestNET4\bin\x64\Release\SonnetTest.exe /Logger:Appveyor

after_test:
  - echo -- after_test
  - mkdir package\x64\net5.0
  - copy MSVisualStudio\v16\Sonnet\bin\x64\Release\net5.0\Sonnet.dll package\x64\net5.0\.
  - copy MSVisualStudio\v16\Sonnet\bin\x64\Release\net5.0\Sonnet.xml package\x64\net5.0\.
  - copy MSVisualStudio\v16\Sonnet\bin\x64\Release\net5.0\SonnetWrapper.dll package\x64\net5.0\.
  - copy MSVisualStudio\v16\Sonnet\bin\x64\Release\net5.0\Ijwhost.dll package\x64\net5.0\.
  - mkdir package\x64\net40
  - copy MSVisualStudio\v16\SonnetNET4\bin\x64\Release\Sonnet.dll package\x64\net40\.
  - copy MSVisualStudio\v16\SonnetNET4\bin\x64\Release\Sonnet.xml package\x64\net40\.
  - copy MSVisualStudio\v16\SonnetNET4\bin\x64\Release\SonnetWrapper.dll package\x64\net40\.
  - copy AUTHORS.txt package\.
  - copy CHANGELOG.txt package\.
  - copy LICENSE.txt package\.
  - copy NOTICE.txt package\.
  - copy README.md package\.
  - copy THIRD-PARTY-LICENSE.txt package\.
  - copy examples\Example5.cs package\.
  - 7z a -tzip -r "c:\projects\sonnet\%RELEASE_NAME%-bin.zip" package\*
  - if not "%sonar_token%"=="" ( SonarScanner.MSBuild.exe end /d:"sonar.login=%sonar_token%" )

artifacts:
  - path: $(RELEASE_NAME)-bin.zip
    name: Sonnet
    
  - path: $(RELEASE_NAME)-src.zip
    name: Sonnet Sources
    
#deploy:
#  - provider: GitHub
#    tag: $(RELEASE_NAME)
#    release: $(RELEASE_NAME)
#    artifact: Sonnet
#   draft: false
#   prerelease: true
#   auth_token  somethign
